doctype html
html(lang='en')
    head
        meta(charset='UTF-8')
        title Form
        link(rel="stylesheet" href="https://unpkg.com/mocha/mocha.css")
        style.
            table {
                width: 100%;
            }
            td {
                border: 1px solid #000; 
                padding: 15px;
                text-align: left;
            }
            th {
                background-color: #04AA6D;
                color: white;
            }
        script.
            /**************************************************************************************/
            /* Function that i had to write because why not, those tasks are getting stupideroooo */
            /**************************************************************************************/
            function getTime(europe_city) {
                console.log(europe_city);
                return new Promise((resolve, reject) => {
                    const xhr = new XMLHttpRequest();
                    xhr.open("GET", `http://worldtimeapi.org/api/timezone/Europe/${europe_city}`, true);
                    xhr.setRequestHeader("Accept", "application/json");
                    xhr.addEventListener("load", () => {
                        if (xhr.status == 200) resolve(JSON.parse(xhr.responseText));
                        else if (xhr.status == 404) reject(xhr.responseText);
                        else reject("There was problem other than 404");
                    });
                    xhr.addEventListener("error", () => {
                        reject("There was a problem with this request.");
                    });
                    xhr.send();
                });
            }
            function setTime(europe_city){
                const alert = document.getElementById("alert");
                const temp = document.getElementById("inside");
                if (temp != null) {temp.remove();}
                const in_div = document.createElement("div");
                in_div.id = "inside";
                const para = document.createElement("p");

                getTime(europe_city).then(function (result) {para.textContent = JSON.stringify(result,null,"\t")})
                .catch(function (error) {para.textContent = error});

                in_div.appendChild(para);
                alert.appendChild(in_div);
            }
            /**************************************************************************************/
            /* Function that retrieves the content of one of the selected text fields of the form */
            /**************************************************************************************/
            function getName(http_method){
                let name = '';

                if (http_method == "GET"){
                    name = document.getElementById("name_GET").value;
                }
                else if (http_method == "POST") {
                    name = document.getElementById("name_POST").value;
                }
                return name;
            }

            /**************************************************************************************/
            /* Function that performs (asynchronous) query to the web server using AJAX           */
            /**************************************************************************************/
            /* http_method ∈ ["GET", "POST"]                                                      */ 
            /* response_type ∈ ["text", "json", "document"]                                       */ 
            /* name - Contents of the form's text box - data that needs to be sent asynchronously */
            /**************************************************************************************/
            function requestAJAX(http_method, response_type, name, show_alert=false) {
                //-----------------------------------------------
                // Create an object representing the request to the web server — see https://developer.mozilla.org/docs/Web/API/XMLHttpRequest
                //-----------------------------------------------
                const xhr = new XMLHttpRequest();

                //-----------------------
                // Observers registration
                //-----------------------

                name = encodeURIComponent(name);
                // If the request was successful
                xhr.addEventListener("load", function (evt) {                          
                    if (xhr.status === 200) {
                        console.group('AJAX');
                        console.log(`HTTP method ⟶\t\t${http_method}\nResponse type ⟶\t${response_type}\nInput data ⟶\t\t${name}`);
                        console.log(xhr.response);
                        console.groupEnd();
                        if(show_alert) {
                            const alert = document.getElementById("alert");
                            const temp = document.getElementById("inside");
                            if (temp != null) {temp.remove();}
                            const in_div = document.createElement("div");
                            in_div.id = "inside";
                            const para = document.createElement("p");
                            switch (response_type){
                                case 'json':
                                    para.textContent = JSON.stringify(xhr.response);
                                    break;
                                case 'document':
                                    para.textContent = xhr.response.activeElement.outerHTML;
                                    break;
                                default:
                                    para.textContent = xhr.response;
                                }
                            in_div.appendChild(para);
                            alert.appendChild(in_div);
                        }
                        else { 
                            results.set(`ajax ${http_method} ${response_type}`, xhr.response);
                            dispatchEvent(received); 
                        }
                    }
                });

                // If the request was failed
                xhr.addEventListener("error", function (evt) {
                    window.alert('There was a problem with this request.');
                });

                //--------------------------------------------------------------------------
                // Configuration and execution of the (asynchronous) query to the web server
                //--------------------------------------------------------------------------
                xhr.responseType = response_type;  // Type of data received by the 'load' observer
                xhr.withCredentials = true; // Do not modify or remove

                // Sprawdź czy jest GET czy POST
                if (http_method == "GET") {
                    xhr.open(http_method, `http://localhost:8000/submit?name=${name}`, true);
                }
                else if (http_method == "POST") {
                    xhr.open(http_method, `http://localhost:8000/submit`, true);
                    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                }

                //****************************************************************************************
                // What is the acceptable data type - the server part should return data of the given type
                // Default value: '*/*'
                //****************************************************************************************
                switch(response_type){
                    case 'json':
                        xhr.setRequestHeader('Accept', 'application/json');
                        break;
                    case 'document':
                        xhr.setRequestHeader('Accept', 'application/xml');
                        break;
                }  
                if (http_method == "GET") {
                    xhr.send(null);
                }
                else if (http_method == "POST") {
                    xhr.send(`name=${name}`);
                }
            }

            /**************************************************************************************/
            /* Function that performs (asynchronous) query to the web server  usingFetch API      */
            /**************************************************************************************/
            /* http_method ∈ ["GET", "POST"]                                                      */ 
            /* response_type ∈ ["text", "json", "xml"]                                            */ 
            /* name - Contents of the form's text box - data that needs to be sent asynchronously */
            /**************************************************************************************/
            async function requestFetchAPI(http_method, response_type, name, show_alert=false) {
                let accept = '*/*';
                name = encodeURIComponent(name);

                switch(response_type){
                    case 'json':
                        accept = 'application/json';
                        break;
                    case 'xml':
                        accept = 'application/xml';
                        break;
                }
                let tmp = '';
                let tmp_str = '';
                if (http_method == "GET") {
                    tmp_str = `http://localhost:8000/submit?name=${name}`;
                    tmp = {
                        method: http_method,
                        credentials: "include", // Do not modify or remove
                        headers: {
                            //****************************************************************************************
                            // What is the acceptable data type—the server part should return data of the given type
                            //****************************************************************************************
                            Accept: accept
                        }
                    };
                }
                else if (http_method == "POST") {
                    tmp_str = `http://localhost:8000/submit`;
                    tmp = {
                        method: http_method,
                        body: `name=${name}`,
                        credentials: "include", // Do not modify or remove
                        headers: {
                            //****************************************************************************************
                            // What is the acceptable data type—the server part should return data of the given type
                            //****************************************************************************************
                            Accept: accept,
                            'Content-type': 'application/x-www-form-urlencoded',
                        }
                    };
                }
                //--------------------------------------------------------------------------
                // Configuration and execution of the (asynchronous) query to the web server
                //--------------------------------------------------------------------------
                try {
                    const response = await fetch(tmp_str, tmp);
                    if (!response.ok)
                        throw Error(response.statusText);

                    console.group('Fetch API');
                    console.log(`HTTP method ⟶\t\t${http_method}\nResponse type ⟶\t${response_type}\nInput data ⟶\t\t${name}`);
                    let result;

                    if (!response.headers.get('content-type')?.includes('application/json')) {
                        // If the received data is plain text or an XML document
                        result = await response.text(); 
                    }
                    else {
                        //If the received data is a JSON document
                        result = await response.json();
                    }
                    console.log(result);
                    console.groupEnd();   
                    if(show_alert) {
                        const alert = document.getElementById("alert");
                        const temp = document.getElementById("inside");
                        if (temp != null) {temp.remove();}
                        const in_div = document.createElement("div");
                        in_div.id = "inside";
                        const para = document.createElement("p");
                        if(response.headers.get('content-type')?.includes('application/json')) {
                            para.textContent = JSON.stringify(result);
                        }
                        else {
                            para.textContent = result;
                        }
                        in_div.appendChild(para);
                        alert.appendChild(in_div);
                        } 
                    else {
                        results.set(`fetch ${http_method} ${response_type}`, result);
                        dispatchEvent(received);
                    }
                }
                catch (e) {
                    window.alert(e);
                }
            }
        script(src="https://unpkg.com/mocha/mocha.js") 
        script(type="module").
            import { expect } from 'https://unpkg.com/chai/chai.js' 
            window.expect = expect
    body
        script(class="mocha-init").
            mocha.setup('bdd');
            mocha.checkLeaks(); 
        div(id="alert")
        main
            table
                tr
                    th  
                    th GET
                    th POST
                    th CITY
                tr 
                    th(colspan='4' style=' background-color: #04556D;') Without AJAX and Fetch API
                tr
                    th HTTP
                    td 
                        form(action="http://localhost:8000/submit" method="GET")
                            label(for="name_GET") Your name
                            input(type="text" id="name_GET" name="name")
                            br
                            input(type="submit" value="text")
                    td 
                        form(action="http://localhost:8000/submit" method="POST") 
                            label(for="name_POST") Your name
                            input(type="text" id="name_POST" name="name")
                            br
                            input(type="submit" value="text")
                    td 
                        form(onsubmit="event.preventDefault();") 
                            label(for="city") Your city
                            input(type="text" id="city" name="city")
                            br
                            button(type="submit" onclick="setTime(document.getElementById('city').value)") Click me
                tr 
                    th(colspan='3' style=' background-color: #04556D;')  Asynchronous requests
                tr 
                    th AJAX 
                    each method in ["GET", "POST"]
                        td
                            each type in ["text", "json", "document"]

                                button(onclick=`console.clear() ; requestAJAX("${method}","${type}", getName('${method}'), true)`) #{type}
                tr
                    th Fetch API 
                    each method in ["GET", "POST"]
                        td
                            each type in ["text", "json", "xml"]
                                button(onclick=`console.clear() ; requestFetchAPI("${method}","${type}", getName('${method}'), true)`) #{type}
        h1 Unit tests
        button(onclick='window.location.reload();') Restart
        div(id="mocha")
        script.
            const name = 'John Doe ą/?:@&=+$#';

            if(window.location.port == 8000) { 
                window.addEventListener("load", (event) => {
                    for(let method of ["GET","POST"]){
                        for(let type of ["text", "json", "document"])
                            requestAJAX(method, type, name);                        
                        for(let type of ["text", "json", "xml"])
                            requestFetchAPI(method, type, name);
                    }
                })
            };
        script(class="mocha-exec").
            //****************************************************************************************
            // Unit tests
            //****************************************************************************************
            var results = new Map();
            var received = new Event('received');
            var test_executed = false;

            function decodeHtml(html) {
                var txt = document.createElement("textarea");
                txt.innerHTML = html;

                return txt.value;
            }

            addEventListener('received', (e) => {
                if(!test_executed && results.size === 12){
                    const parser = new DOMParser();
                    const xml_document= parser.parseFromString("<welcome>Hello 'John Doe ą/?:@&amp;=+$#'</welcome>","text/xml");

                    describe('AJAX requests', function() {
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','text')`, function() {
                            expect(results.get('ajax GET text')).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','json')`, function() {
                            expect(results.get('ajax GET json')).to.eql({welcome: `Hello '${name}'`});
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','document')`, function() {
                            expect(results.get('ajax GET document').documentElement.firstChild.data).to.equal(xml_document.documentElement.firstChild.data);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','text')`, function() {
                            expect(results.get('ajax POST text')).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','json')`, function() {
                            expect(results.get('ajax POST json')).to.eql({welcome: `Hello '${name}'`});
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','document')`, function() {
                            expect(results.get('ajax POST document').documentElement.firstChild.data).to.equal(xml_document.documentElement.firstChild.data);
                        });
                    });

                    describe('Fetch API requests', function() {   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','text')`, async function() {
                            const result  = await results.get('fetch GET text')
                            expect(result).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','json')`, async function() {
                            const result  = await results.get('fetch GET json')
                            expect(result).to.eql({welcome: `Hello '${name}'`});
                        });   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','xml')`, async function() {
                            const result  = await results.get('fetch GET xml');
                            expect(decodeHtml(result)).to.equal(`<welcome>Hello '${name}'</welcome>`);
                        }); 
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','text')`, async function() {
                            const result  = await results.get('fetch POST text')
                            expect(result).to.equal(`Hello '${name}'`);                   
                        });
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','json')`, async function() {
                            const result  = await results.get('fetch POST json')
                            expect(result).to.eql({welcome: `Hello '${name}'`});
                        });   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','xml')`, async function() {
                            const result  = await results.get('fetch POST xml');
                            expect(decodeHtml(result)).to.equal(`<welcome>Hello '${name}'</welcome>`);
                        });    
                    });     

                    mocha.run();
                    test_executed = true;
                }
            });